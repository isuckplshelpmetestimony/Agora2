generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  bio           String?
  location      String?
  jobTitle      String?
  phoneNumber   String?
  website       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  preferences   Json?      @default("{}")
  role          String?
  accounts      Account[]
  activities    Activity[]
  sessions      Session[]
  assignedTasks Task[]     @relation("UserAssignedTasks")
  events        Event[]    @relation("EventAttendees")
  feedbacks     Feedback[] @relation("UserFeedbacks")
  upvotes       Upvote[]   @relation("UserUpvotes")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  type        String
  description String
  createdAt   DateTime @default(now())
  metadata    Json?    @default("{}")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String
  dueDate     DateTime?
  boardId     String
  assigneeId  String
  sprintId    String?
  storyPoints Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  priority    Priority  @default(MEDIUM)
  assignee    User      @relation("UserAssignedTasks", fields: [assigneeId], references: [id], onDelete: Cascade)
  board       Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  sprint      Sprint?   @relation(fields: [sprintId], references: [id], onDelete: Cascade)
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  type        EventType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  attendees   User[]    @relation("EventAttendees")
}

model Sprint {
  id              String   @id @default(cuid())
  startDate       DateTime
  endDate         DateTime
  velocity        Int?
  health          String?
  burndownData    Json?
  teamPerformance Json?
  tasks           Task[]
}

// Feedback Forum Models
model Feedback {
  id          String           @id @default(cuid())
  title       String
  description String
  category    FeedbackCategory
  status      FeedbackStatus
  upvotes     Int              @default(0)
  authorId    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  author      User             @relation("UserFeedbacks", fields: [authorId], references: [id], onDelete: Cascade)
  comments    FeedbackComment[]
  upvoteUsers Upvote[]         @relation("FeedbackUpvotes")
}

model FeedbackComment {
  id         String   @id @default(cuid())
  feedbackId String
  content    String
  createdAt  DateTime @default(now())
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
}

// Optional: Prevent duplicate upvotes per user
model Upvote {
  id         String   @id @default(cuid())
  feedbackId String
  userId     String
  feedback   Feedback @relation("FeedbackUpvotes", fields: [feedbackId], references: [id], onDelete: Cascade)
  user       User     @relation("UserUpvotes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([feedbackId, userId])
}

enum FeedbackCategory {
  FEATURE
  BUG
  INTEGRATION
  OTHER
}

enum FeedbackStatus {
  PLANNED
  IN_PROGRESS
  UNDER_REVIEW
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum EventType {
  RECURRING
  ONE_TIME
}
