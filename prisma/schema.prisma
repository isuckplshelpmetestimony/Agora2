generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  bio           String?
  location      String?
  jobTitle      String?
  phoneNumber   String?
  website       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  preferences   Json?      @default("{}")
  accounts      Account[]
  activities    Activity[]
  sessions      Session[]
  assignedTasks Task[]     @relation("UserAssignedTasks")
  events        Event[]    @relation("EventAttendees")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  type        String
  description String
  createdAt   DateTime @default(now())
  metadata    Json?    @default("{}")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String
  dueDate     DateTime?
  boardId     String
  assigneeId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  priority    Priority  @default(MEDIUM)
  assignee    User      @relation("UserAssignedTasks", fields: [assigneeId], references: [id], onDelete: Cascade)
  board       Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  type        EventType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  attendees   User[]    @relation("EventAttendees")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum EventType {
  RECURRING
  ONE_TIME
}
